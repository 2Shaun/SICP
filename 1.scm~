(define >=
  (lambda (x y)
    (not (< x y))
    )
  )

(define <=
  (lambda (x y)
    (not (> x y))
    )
  )

(define abs
  (lambda (x)
    (if (>= x 0)
	x
	(- x))
    )
  )

(define square
  (lambda (x) (* x x))
  )

(define sum-of-squares
  (lambda (x y)
    (+ (square x) (square y))
    )
  )

(define (square-sum-larger a b c)
  (if (>= a b)
      (if (>= b c)
	  (sum-of-squares a b)
	  (sum-of-squares a c))
      (if (>= a c)
	  (sum-of-squares b a)
	  (sum-of-squares b c))
      )
  )

(define cbrt
  (lambda (x)
    (cbrt-try x 1.0)
    )
  )

(define cbrt-try
  (lambda (x guess)
    (if (< (abs (- (cbrt-improve x guess) guess)) 0.0001)
	guess
	(cbrt-try x (cbrt-improve x guess))
	)
    )
  )

(define cbrt-improve
  (lambda (x guess)
    (/ (+ (/ x (square guess))
	  (* 2 guess)) 3)
    )
  )

(cbrt 27)
