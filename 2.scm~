(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (average a b)
  (/ (+ a b) 2))

(define (make-rat n d)
  (cond ((or (and (> n 0) (> d 0)) (and (< n 0) (< d 0)) (and (> n 0) (< d 0)))
	(let ((g (- (gcd n d))))
	  (cons (/ n g) (/ d g))))
	(else
	 (let ((g (- (gcd n d))))
	  (cons (/ n g) (/ d g))))))

(define (make-rat n d)
  (cond ((or (and (< n 0) (> d 0)) (and (> n 0) (< d 0)))
	 (let ((g (- (gcd n d))))    ; swaps signs on pair
	   (cons (/ n g) (/ d g))))
	(else
	 (let ((g (gcd n d)))
	   (cons (/ n g) (/ d g))))))

(define one-half (make-rat 1 2))

(define one-third (make-rat 1 3))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ",")
  (display (y-point p))
  (display ")"))

(define (x-point p) (car p))

(define (y-point p) (cdr p))

(define (make-point x y) (cons x y))

(define (p1 s) (car s))

(define (p2 s) (cdr s))

(define (make-segment p1 p2)
  (cons p1 p2))

(define (midpoint seg)
  (make-point (average (x-point (p1 seg)) (x-point (p2 seg)))
	      (average (y-point (p1 seg)) (y-point (p2 seg)))))

;(print-point (midpoint (make-segment (make-point 1 2) (make-point 2 3))))

(define (distance seg)
  (sqrt (+ (square (- (x-point (p1 seg)) (x-point (p2 seg))))
	   (square (- (y-point (p1 seg)) (y-point (p2 seg)))))))

(define (rectangle seg1 seg2)  ; doesn't validate that seg1 is touching seg2 (they must share a point
  (cons seg1 seg2))

(define (rectangle-p p1 corner p2)
  (cons (make-segment p1 corner) (make-segment corner p2)))

;(define (length rect)
;  (distance (car rect)))

;(define (width rect)
;  (distance (cdr rect)))

(define (area rect)
  (* (length rect) (width rect)))

(define (perimeter rect)
  (+ (* 2 (length rect)) (* 2 (width rect))))

;(define l (make-segment (make-point 1 1) (make-point 1 3)))

;(define w (make-segment (make-point 1 3) (make-point 4 3)))

;(define r (rectangle l w))

;(define rp (rectangle-p (make-point 1 1) (make-point 1 3) (make-point 4 3)))

;(display (area r))
;(newline)
;(display (area rp))
;(newline)
;(display (perimeter r))
;(perimeter r)

(define (cons x y)
  (lambda (m) x y))

(define (car z)
  (z (lambda (p q) p)))

(define (append list1 list2)
(if (null? list1)
list2
(cons (car list1) (append (cdr list1) list2))))

; when dealing with recursion
; you need to pay close attention to data types
; return types, argument types, etc.
; car inputs a list and outputs a list element
; cdr inputs a list and outputs a list
; append inputs two lists and outputs a list
; it's important that were 'going down' the recursion tree first
; we go down to the last element and that is appended on the left

(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))

(define (reverse l)
(if (= (length l) 1)
l
(append (reverse (cdr l)) (list (car l))))) 

(define us-coins (list 50 25 10 5 1))

(define uk-coins (list 100 50 20 10 5 2 1 0.5))

(define (cc amount coin-values)
  (cond ((= amount 0) 1)
	((or (< amount 0) (no-more? coin-values)) 0)
	(else
	 (+ (cc amount
		(except-first-denomination coin-values))
	    (cc (- amount
		   (first-denomination coin-values))
		coin-values)))))

(define (first-denomination coin-values)
  (car coin-values))

(define (except-first-denomination coin-values)
  (cdr coin-values))

(define (no-more? coin-values)
  (= (length coin-values) 0))

;(define (same-parity x . y)
;  (if (= (length y) 0)
;      y
;      (if (= (remainder x 2) (remainder (car y) 2))
;	  (append (list (car y)) (same-parity x (cdr y)))
;	  (same-parity x (cdr y)))))

(define (taildot x . y)
  (if (= (length y) 0)
      y
      (if (= (length y) 1)
	  (list 1)
	  y)))

(define (same-parity x . y)
  (define (same-parity-iter n parity-list)
    (if (< n (length y))
	(if (= (remainder x 2) (remainder (car y) 2))
	    (same-parity-iter (+ n 1) (append (list (car y) parity-list)))
	    (same-parity-item (+ n 1) parity-list))
	parity-list))
  (same-parity-iter 0 y))
